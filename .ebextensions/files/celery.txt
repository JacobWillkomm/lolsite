celeryenv=`cat /opt/python/current/env | tr '\n' ',' | sed 's/export //g' | sed 's/$PYTHONPATH//g' | sed 's/$LD_LIBRARY_PATH//g'`
celeryenv=${celeryenv%?}

celeryconf="[program:celeryd-worker]

; Set full path to celery program if using virtualenv
command=source /opt/python/current/env && /opt/python/run/venv/bin/celery worker -A lolsite --loglevel=INFO -n \"worker-$HOSTNAME\"

; The directory to your Django project
directory=/opt/python/current/app  

; If supervisord is run as the root user, switch users to this UNIX user account
; before doing any processing.
user=nobody

; Supervisor will start as many instances of this program as named by numprocs
numprocs=1

stdout_logfile=/var/log/celery-worker-$HOSTNAME.log  
stderr_logfile=/var/log/celery-worker-$HOSTNAME.log 

; If true, this program will start automatically when supervisord is started
autostart=true

; May be one of false, unexpected, or true. If false, the process will never
; be autorestarted. If unexpected, the process will be restart when the program
; exits with an exit code that is not one of the exit codes associated with this
; processâ€™ configuration (see exitcodes). If true, the process will be
; unconditionally restarted when it exits, without regard to its exit code.
autorestart=true

; The total number of seconds which the program needs to stay running after
; a startup to consider the start successful.
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600

; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true

; if your broker is supervised, set its priority higher
; so it starts first
priority=998

environment=$celeryenv" 

# Create the celery supervisord conf script
echo "$celeryconf" | tee /opt/python/etc/celery_worker.conf

# Add configuration script to supervisord conf (if not there already)
if ! grep -Fxq "files: celery_worker.conf" /opt/python/etc/supervisord.conf  
  then
  echo "[include]" | tee -a /opt/python/etc/supervisord.conf
  echo "files: celery_worker.conf" | tee -a /opt/python/etc/supervisord.conf
fi
