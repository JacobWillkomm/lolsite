files:
  "/opt/elasticbeanstalk/hooks/appdeploy/post/run_supervised_celeryd.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/sh
      celeryenv=`cat /opt/python/current/env | tr '\n' ',' | sed 's/export //g' | sed 's/$PYTHONPATH//g' | sed 's/$LD_LIBRARY_PATH//g' | sed 's/%/%%/g'`
      celeryenv=${celeryenv%?}
      celeryconf="[program:celeryd-worker]
      command=/opt/python/run/venv/bin/celery worker -A lolsite --loglevel=INFO -n \"worker-$HOSTNAME\"
      directory=/opt/python/current/app  
      user=nobody
      numprocs=1
      stdout_logfile=/var/log/celery-worker-$HOSTNAME.log  
      stderr_logfile=/var/log/celery-worker-$HOSTNAME.log 
      autostart=true
      autorestart=true
      startsecs=10
      stopwaitsecs=600
      killasgroup=true
      priority=998
      environment=$celeryenv" 

      sockconf="[socket_chmod]
      file=/opt/python/run/supervisor.sock
      chmod=0700"

      # Create the celery supervisord conf script
      echo "$celeryconf" | tee /opt/python/etc/celery.conf
      echo "$sockconf" | tee /opt/python/etc/sock.conf

      # Add configuration script to supervisord conf (if not there already)
      if ! grep -Fxq "[include]" /opt/python/etc/supervisord.conf
        then
        echo "[include]" | tee -a /opt/python/etc/supervisord.conf
        echo "files: sock.conf celery.conf" | tee -a /opt/python/etc/supervisord.conf
      fi

      /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf reread
      /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf update
      /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf restart celeryd-worker

container_commands:
  06_celery_tasks_run:
    command: "/opt/elasticbeanstalk/hooks/appdeploy/post/run_supervised_celeryd.sh"

option_settings:
  aws:elasticbeanstalk:container:python:
    WSGIPath: lolsite/wsgi.py
  aws:elasticbeanstalk:application:environment:
    DJANGO_SETTINGS_MODULE: "lolsite.settings"
